// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: app/Adapter/In/ApiGrcp/proto/result.proto

package result

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResultServiceClient is the client API for ResultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResultServiceClient interface {
	CommunicateTaskManually(ctx context.Context, in *CommunicateTaskManuallyRequest, opts ...grpc.CallOption) (*CommunicateTaskManuallyResponse, error)
	GetBatchResults(ctx context.Context, in *GetBatchResultsRequest, opts ...grpc.CallOption) (*ListResultsResponse, error)
	GetTaskBatches(ctx context.Context, in *GetTaskBatchesRequest, opts ...grpc.CallOption) (*ListBatchesResponse, error)
	StreamResults(ctx context.Context, in *StreamResultsRequest, opts ...grpc.CallOption) (ResultService_StreamResultsClient, error)
}

type resultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResultServiceClient(cc grpc.ClientConnInterface) ResultServiceClient {
	return &resultServiceClient{cc}
}

func (c *resultServiceClient) CommunicateTaskManually(ctx context.Context, in *CommunicateTaskManuallyRequest, opts ...grpc.CallOption) (*CommunicateTaskManuallyResponse, error) {
	out := new(CommunicateTaskManuallyResponse)
	err := c.cc.Invoke(ctx, "/result.ResultService/CommunicateTaskManually", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultServiceClient) GetBatchResults(ctx context.Context, in *GetBatchResultsRequest, opts ...grpc.CallOption) (*ListResultsResponse, error) {
	out := new(ListResultsResponse)
	err := c.cc.Invoke(ctx, "/result.ResultService/GetBatchResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultServiceClient) GetTaskBatches(ctx context.Context, in *GetTaskBatchesRequest, opts ...grpc.CallOption) (*ListBatchesResponse, error) {
	out := new(ListBatchesResponse)
	err := c.cc.Invoke(ctx, "/result.ResultService/GetTaskBatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultServiceClient) StreamResults(ctx context.Context, in *StreamResultsRequest, opts ...grpc.CallOption) (ResultService_StreamResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResultService_ServiceDesc.Streams[0], "/result.ResultService/StreamResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &resultServiceStreamResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResultService_StreamResultsClient interface {
	Recv() (*StreamResultsResponse, error)
	grpc.ClientStream
}

type resultServiceStreamResultsClient struct {
	grpc.ClientStream
}

func (x *resultServiceStreamResultsClient) Recv() (*StreamResultsResponse, error) {
	m := new(StreamResultsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResultServiceServer is the server API for ResultService service.
// All implementations must embed UnimplementedResultServiceServer
// for forward compatibility
type ResultServiceServer interface {
	CommunicateTaskManually(context.Context, *CommunicateTaskManuallyRequest) (*CommunicateTaskManuallyResponse, error)
	GetBatchResults(context.Context, *GetBatchResultsRequest) (*ListResultsResponse, error)
	GetTaskBatches(context.Context, *GetTaskBatchesRequest) (*ListBatchesResponse, error)
	StreamResults(*StreamResultsRequest, ResultService_StreamResultsServer) error
	mustEmbedUnimplementedResultServiceServer()
}

// UnimplementedResultServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResultServiceServer struct {
}

func (UnimplementedResultServiceServer) CommunicateTaskManually(context.Context, *CommunicateTaskManuallyRequest) (*CommunicateTaskManuallyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunicateTaskManually not implemented")
}
func (UnimplementedResultServiceServer) GetBatchResults(context.Context, *GetBatchResultsRequest) (*ListResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchResults not implemented")
}
func (UnimplementedResultServiceServer) GetTaskBatches(context.Context, *GetTaskBatchesRequest) (*ListBatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskBatches not implemented")
}
func (UnimplementedResultServiceServer) StreamResults(*StreamResultsRequest, ResultService_StreamResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamResults not implemented")
}
func (UnimplementedResultServiceServer) mustEmbedUnimplementedResultServiceServer() {}

// UnsafeResultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResultServiceServer will
// result in compilation errors.
type UnsafeResultServiceServer interface {
	mustEmbedUnimplementedResultServiceServer()
}

func RegisterResultServiceServer(s grpc.ServiceRegistrar, srv ResultServiceServer) {
	s.RegisterService(&ResultService_ServiceDesc, srv)
}

func _ResultService_CommunicateTaskManually_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunicateTaskManuallyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultServiceServer).CommunicateTaskManually(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/result.ResultService/CommunicateTaskManually",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultServiceServer).CommunicateTaskManually(ctx, req.(*CommunicateTaskManuallyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultService_GetBatchResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultServiceServer).GetBatchResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/result.ResultService/GetBatchResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultServiceServer).GetBatchResults(ctx, req.(*GetBatchResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultService_GetTaskBatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskBatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultServiceServer).GetTaskBatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/result.ResultService/GetTaskBatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultServiceServer).GetTaskBatches(ctx, req.(*GetTaskBatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultService_StreamResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResultServiceServer).StreamResults(m, &resultServiceStreamResultsServer{stream})
}

type ResultService_StreamResultsServer interface {
	Send(*StreamResultsResponse) error
	grpc.ServerStream
}

type resultServiceStreamResultsServer struct {
	grpc.ServerStream
}

func (x *resultServiceStreamResultsServer) Send(m *StreamResultsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ResultService_ServiceDesc is the grpc.ServiceDesc for ResultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "result.ResultService",
	HandlerType: (*ResultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommunicateTaskManually",
			Handler:    _ResultService_CommunicateTaskManually_Handler,
		},
		{
			MethodName: "GetBatchResults",
			Handler:    _ResultService_GetBatchResults_Handler,
		},
		{
			MethodName: "GetTaskBatches",
			Handler:    _ResultService_GetTaskBatches_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamResults",
			Handler:       _ResultService_StreamResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/Adapter/In/ApiGrcp/proto/result.proto",
}
